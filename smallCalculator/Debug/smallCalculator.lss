
smallCalculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d64  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000d64  00000dd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e50  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001553  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000965  00000000  00000000  000024c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b52  00000000  00000000  00002e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000230  00000000  00000000  00003980  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000508  00000000  00000000  00003bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f21  00000000  00000000  000040b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00004fd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 19 03 	call	0x632	; 0x632 <main>
  7a:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_4bit_cmnd>:
	lcd_4bit_cmnd(0x06);	// Increment cursor (shift cursor to right) 
	lcd_4bit_cmnd(0x01);	// Clear display screen 
}

void lcd_4bit_cmnd(unsigned char command) {
	lcd_port = (lcd_port & 0x0F) | (command & 0xF0); // Sending upper nibble 
  82:	95 b3       	in	r25, 0x15	; 21
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	95 bb       	out	0x15, r25	; 21
	lcd_port &= ~(1 << RS);							 // RS=0, command reg. 
  8e:	95 b3       	in	r25, 0x15	; 21
  90:	9e 7f       	andi	r25, 0xFE	; 254
  92:	95 bb       	out	0x15, r25	; 21
	lcd_port |= (1 << EN);								 // Enable pulse 
  94:	95 b3       	in	r25, 0x15	; 21
  96:	92 60       	ori	r25, 0x02	; 2
  98:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	32 e0       	ldi	r19, 0x02	; 2
  9c:	3a 95       	dec	r19
  9e:	f1 f7       	brne	.-4      	; 0x9c <lcd_4bit_cmnd+0x1a>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <lcd_4bit_cmnd+0x20>
	_delay_us(1);
	lcd_port &= ~(1 << EN);
  a2:	95 b3       	in	r25, 0x15	; 21
  a4:	9d 7f       	andi	r25, 0xFD	; 253
  a6:	95 bb       	out	0x15, r25	; 21
  a8:	ef e8       	ldi	r30, 0x8F	; 143
  aa:	f1 e0       	ldi	r31, 0x01	; 1
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_4bit_cmnd+0x2a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <lcd_4bit_cmnd+0x30>
  b2:	00 00       	nop
	_delay_us(200);
	lcd_port = (lcd_port & 0x0F) | (command << 4);	 // Sending lower nibble 
  b4:	25 b3       	in	r18, 0x15	; 21
  b6:	f0 e1       	ldi	r31, 0x10	; 16
  b8:	8f 9f       	mul	r24, r31
  ba:	c0 01       	movw	r24, r0
  bc:	11 24       	eor	r1, r1
  be:	92 2f       	mov	r25, r18
  c0:	9f 70       	andi	r25, 0x0F	; 15
  c2:	89 2b       	or	r24, r25
  c4:	85 bb       	out	0x15, r24	; 21
	lcd_port |= (1 << EN);
  c6:	85 b3       	in	r24, 0x15	; 21
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	85 bb       	out	0x15, r24	; 21
  cc:	32 e0       	ldi	r19, 0x02	; 2
  ce:	3a 95       	dec	r19
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_4bit_cmnd+0x4c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <lcd_4bit_cmnd+0x52>
	_delay_us(1);
	lcd_port &= ~(1 << EN);
  d4:	85 b3       	in	r24, 0x15	; 21
  d6:	8d 7f       	andi	r24, 0xFD	; 253
  d8:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	8f e9       	ldi	r24, 0x9F	; 159
  dc:	9f e0       	ldi	r25, 0x0F	; 15
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_4bit_cmnd+0x5c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_4bit_cmnd+0x62>
  e4:	00 00       	nop
  e6:	08 95       	ret

000000e8 <lcd_4bit_init>:
#include "16x2lcd.h"

//Functions Initialization===========//
//4-Bit mode functions
void lcd_4bit_init(void) {
	lcd_direction = 0xFF;   // Make LCD port direction as o/p 
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	84 bb       	out	0x14, r24	; 20
  ec:	8f e3       	ldi	r24, 0x3F	; 63
  ee:	9c e9       	ldi	r25, 0x9C	; 156
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_4bit_init+0x8>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_4bit_init+0xe>
  f6:	00 00       	nop
	_delay_ms(20);		    // LCD Power ON delay always >15ms 
		
	lcd_4bit_cmnd(0x33);
  f8:	83 e3       	ldi	r24, 0x33	; 51
  fa:	0e 94 41 00 	call	0x82	; 0x82 <lcd_4bit_cmnd>
	lcd_4bit_cmnd(0x32);	// Send for 4 bit initialization of LCD  
  fe:	82 e3       	ldi	r24, 0x32	; 50
 100:	0e 94 41 00 	call	0x82	; 0x82 <lcd_4bit_cmnd>
	lcd_4bit_cmnd(0x28);	// 2 line, 5*7 matrix in 4-bit mode 
 104:	88 e2       	ldi	r24, 0x28	; 40
 106:	0e 94 41 00 	call	0x82	; 0x82 <lcd_4bit_cmnd>
	lcd_4bit_cmnd(0x0E);	// Display on cursor on
 10a:	8e e0       	ldi	r24, 0x0E	; 14
 10c:	0e 94 41 00 	call	0x82	; 0x82 <lcd_4bit_cmnd>
	//lcd_4bit_cmnd(0x0c);	// Display on cursor off
	lcd_4bit_cmnd(0x06);	// Increment cursor (shift cursor to right) 
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	0e 94 41 00 	call	0x82	; 0x82 <lcd_4bit_cmnd>
	lcd_4bit_cmnd(0x01);	// Clear display screen 
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 41 00 	call	0x82	; 0x82 <lcd_4bit_cmnd>
 11c:	08 95       	ret

0000011e <lcd_4bit_char>:
	lcd_port &= ~(1 << EN);
	_delay_ms(2);
}

void lcd_4bit_char(unsigned char data) {
	lcd_port = (lcd_port & 0x0F) | (data & 0xF0);	 // Sending upper nibble 
 11e:	95 b3       	in	r25, 0x15	; 21
 120:	9f 70       	andi	r25, 0x0F	; 15
 122:	28 2f       	mov	r18, r24
 124:	20 7f       	andi	r18, 0xF0	; 240
 126:	92 2b       	or	r25, r18
 128:	95 bb       	out	0x15, r25	; 21
	lcd_port |= (1 << RS);						     // RS=1, data reg. 
 12a:	95 b3       	in	r25, 0x15	; 21
 12c:	91 60       	ori	r25, 0x01	; 1
 12e:	95 bb       	out	0x15, r25	; 21
	lcd_port|= (1 << EN);
 130:	95 b3       	in	r25, 0x15	; 21
 132:	92 60       	ori	r25, 0x02	; 2
 134:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	32 e0       	ldi	r19, 0x02	; 2
 138:	3a 95       	dec	r19
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_4bit_char+0x1a>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_4bit_char+0x20>
	_delay_us(1);
	lcd_port &= ~(1 << EN);
 13e:	95 b3       	in	r25, 0x15	; 21
 140:	9d 7f       	andi	r25, 0xFD	; 253
 142:	95 bb       	out	0x15, r25	; 21
 144:	ef e8       	ldi	r30, 0x8F	; 143
 146:	f1 e0       	ldi	r31, 0x01	; 1
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcd_4bit_char+0x2a>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <lcd_4bit_char+0x30>
 14e:	00 00       	nop
	_delay_us(200);
	lcd_port = (lcd_port & 0x0F) | (data << 4);      // Sending lower nibble 
 150:	25 b3       	in	r18, 0x15	; 21
 152:	f0 e1       	ldi	r31, 0x10	; 16
 154:	8f 9f       	mul	r24, r31
 156:	c0 01       	movw	r24, r0
 158:	11 24       	eor	r1, r1
 15a:	92 2f       	mov	r25, r18
 15c:	9f 70       	andi	r25, 0x0F	; 15
 15e:	89 2b       	or	r24, r25
 160:	85 bb       	out	0x15, r24	; 21
	lcd_port |= (1 << EN);
 162:	85 b3       	in	r24, 0x15	; 21
 164:	82 60       	ori	r24, 0x02	; 2
 166:	85 bb       	out	0x15, r24	; 21
 168:	32 e0       	ldi	r19, 0x02	; 2
 16a:	3a 95       	dec	r19
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_4bit_char+0x4c>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_4bit_char+0x52>
	_delay_us(1);
	lcd_port &= ~(1 << EN);
 170:	85 b3       	in	r24, 0x15	; 21
 172:	8d 7f       	andi	r24, 0xFD	; 253
 174:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	8f e9       	ldi	r24, 0x9F	; 159
 178:	9f e0       	ldi	r25, 0x0F	; 15
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcd_4bit_char+0x5c>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <lcd_4bit_char+0x62>
 180:	00 00       	nop
 182:	08 95       	ret

00000184 <lcd_4bit_gotoxy>:
	_delay_ms(2);
}

void lcd_4bit_gotoxy(uint8_t row, uint8_t column) {
	uint8_t offset = (row == 0) ? 0x00 : 0x40;
 184:	81 11       	cpse	r24, r1
 186:	80 e4       	ldi	r24, 0x40	; 64
	lcd_4bit_cmnd(0x80 | (column + offset));
 188:	86 0f       	add	r24, r22
 18a:	80 68       	ori	r24, 0x80	; 128
 18c:	0e 94 41 00 	call	0x82	; 0x82 <lcd_4bit_cmnd>
 190:	08 95       	ret

00000192 <lcd_4bit_str>:
}

void lcd_4bit_str(char *string) {
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	8c 01       	movw	r16, r24
		int i;
		for(i = 0; string[i] != 0; i++)		// Send each char of string till the NULL 
 19c:	c0 e0       	ldi	r28, 0x00	; 0
 19e:	d0 e0       	ldi	r29, 0x00	; 0
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <lcd_4bit_str+0x16>
		{
			lcd_4bit_char(string[i]);
 1a2:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_4bit_char>
	lcd_4bit_cmnd(0x80 | (column + offset));
}

void lcd_4bit_str(char *string) {
		int i;
		for(i = 0; string[i] != 0; i++)		// Send each char of string till the NULL 
 1a6:	21 96       	adiw	r28, 0x01	; 1
 1a8:	f8 01       	movw	r30, r16
 1aa:	ec 0f       	add	r30, r28
 1ac:	fd 1f       	adc	r31, r29
 1ae:	80 81       	ld	r24, Z
 1b0:	81 11       	cpse	r24, r1
 1b2:	f7 cf       	rjmp	.-18     	; 0x1a2 <lcd_4bit_str+0x10>
		{
			lcd_4bit_char(string[i]);
		}
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	08 95       	ret

000001be <lcd_4bit_clear>:

void lcd_4bit_clear() {
	lcd_4bit_cmnd(0x01);		// Clear display
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 41 00 	call	0x82	; 0x82 <lcd_4bit_cmnd>
 1c4:	8f e9       	ldi	r24, 0x9F	; 159
 1c6:	9f e0       	ldi	r25, 0x0F	; 15
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_4bit_clear+0xa>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <lcd_4bit_clear+0x10>
 1ce:	00 00       	nop
	_delay_ms(2);
	lcd_4bit_cmnd(0x80);		// Cursor at home position
 1d0:	80 e8       	ldi	r24, 0x80	; 128
 1d2:	0e 94 41 00 	call	0x82	; 0x82 <lcd_4bit_cmnd>
 1d6:	08 95       	ret

000001d8 <keypad_init>:
 */ 

#include "4x4keypad.h"

void keypad_init() {
	KEYPAD_DDR = 0xF0; // Rows as output, columns as input
 1d8:	80 ef       	ldi	r24, 0xF0	; 240
 1da:	81 bb       	out	0x11, r24	; 17
	KEYPAD_PORT = 0xFF; // Enable internal pull-up resistors
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	82 bb       	out	0x12, r24	; 18
 1e0:	08 95       	ret

000001e2 <keypad_getKey>:
}

char keypad_getKey() {
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	60 97       	sbiw	r28, 0x10	; 16
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	f8 94       	cli
 1f0:	de bf       	out	0x3e, r29	; 62
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	cd bf       	out	0x3d, r28	; 61
	char keypad[4][4] = {
 1f6:	80 e1       	ldi	r24, 0x10	; 16
 1f8:	e0 e6       	ldi	r30, 0x60	; 96
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	de 01       	movw	r26, r28
 1fe:	11 96       	adiw	r26, 0x01	; 1
 200:	01 90       	ld	r0, Z+
 202:	0d 92       	st	X+, r0
 204:	8a 95       	dec	r24
 206:	e1 f7       	brne	.-8      	; 0x200 <keypad_getKey+0x1e>
	};
	
	unsigned char row, col;
	while (1)
	{
		for (col = 0; col < 4; col++)
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	3e c0       	rjmp	.+124    	; 0x288 <keypad_getKey+0xa6>
		{
			KEYPAD_DDR = (0b00010000 << col); // Set column pin as output, pull others high
 20c:	43 2f       	mov	r20, r19
 20e:	50 e0       	ldi	r21, 0x00	; 0
 210:	80 e1       	ldi	r24, 0x10	; 16
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	03 2e       	mov	r0, r19
 216:	02 c0       	rjmp	.+4      	; 0x21c <keypad_getKey+0x3a>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <keypad_getKey+0x36>
 220:	81 bb       	out	0x11, r24	; 17
			KEYPAD_PORT = (~(0b00010000 << col)); // Drive column pin low, pull others high
 222:	80 95       	com	r24
 224:	82 bb       	out	0x12, r24	; 18
 226:	8f ec       	ldi	r24, 0xCF	; 207
 228:	97 e0       	ldi	r25, 0x07	; 7
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <keypad_getKey+0x48>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <keypad_getKey+0x4e>
 230:	00 00       	nop
			_delay_ms(1); // Delay for keypad pin state stabilization
			
			for (row = 0; row < 4; row++)
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	26 c0       	rjmp	.+76     	; 0x282 <keypad_getKey+0xa0>
			{
				if (!(KEYPAD_PIN & (0b00000001 << row)))
 236:	80 b3       	in	r24, 0x10	; 16
 238:	62 2f       	mov	r22, r18
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 2e       	mov	r0, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <keypad_getKey+0x64>
 242:	95 95       	asr	r25
 244:	87 95       	ror	r24
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <keypad_getKey+0x60>
 24a:	80 fd       	sbrc	r24, 0
 24c:	19 c0       	rjmp	.+50     	; 0x280 <keypad_getKey+0x9e>
				{
					while (!(KEYPAD_PIN & (0b00000001 << row))); // Wait for key release
 24e:	80 b3       	in	r24, 0x10	; 16
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	06 2e       	mov	r0, r22
 254:	02 c0       	rjmp	.+4      	; 0x25a <keypad_getKey+0x78>
 256:	95 95       	asr	r25
 258:	87 95       	ror	r24
 25a:	0a 94       	dec	r0
 25c:	e2 f7       	brpl	.-8      	; 0x256 <keypad_getKey+0x74>
 25e:	80 ff       	sbrs	r24, 0
 260:	f6 cf       	rjmp	.-20     	; 0x24e <keypad_getKey+0x6c>
					return keypad[row][col]; // Return the key value
 262:	66 0f       	add	r22, r22
 264:	77 1f       	adc	r23, r23
 266:	66 0f       	add	r22, r22
 268:	77 1f       	adc	r23, r23
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	8c 0f       	add	r24, r28
 270:	9d 1f       	adc	r25, r29
 272:	68 0f       	add	r22, r24
 274:	79 1f       	adc	r23, r25
 276:	fb 01       	movw	r30, r22
 278:	e4 0f       	add	r30, r20
 27a:	f5 1f       	adc	r31, r21
 27c:	80 81       	ld	r24, Z
 27e:	08 c0       	rjmp	.+16     	; 0x290 <keypad_getKey+0xae>
		{
			KEYPAD_DDR = (0b00010000 << col); // Set column pin as output, pull others high
			KEYPAD_PORT = (~(0b00010000 << col)); // Drive column pin low, pull others high
			_delay_ms(1); // Delay for keypad pin state stabilization
			
			for (row = 0; row < 4; row++)
 280:	2f 5f       	subi	r18, 0xFF	; 255
 282:	24 30       	cpi	r18, 0x04	; 4
 284:	c0 f2       	brcs	.-80     	; 0x236 <keypad_getKey+0x54>
	};
	
	unsigned char row, col;
	while (1)
	{
		for (col = 0; col < 4; col++)
 286:	3f 5f       	subi	r19, 0xFF	; 255
 288:	34 30       	cpi	r19, 0x04	; 4
 28a:	08 f4       	brcc	.+2      	; 0x28e <keypad_getKey+0xac>
 28c:	bf cf       	rjmp	.-130    	; 0x20c <keypad_getKey+0x2a>
 28e:	bc cf       	rjmp	.-136    	; 0x208 <keypad_getKey+0x26>
					return keypad[row][col]; // Return the key value
				}
			}
		}
	}
 290:	60 96       	adiw	r28, 0x10	; 16
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <read_equation>:
		
    }
}

// Function to read the full equation from the keypad
void read_equation(char* equation) {
 2a2:	ef 92       	push	r14
 2a4:	ff 92       	push	r15
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	8c 01       	movw	r16, r24
	// Variables to track the current index and maximum allowed input length
	int current_index = 0;
	const int max_input_length = MAX_INPUT_LENGTH - 1; // Leave space for the null terminator

	// Clear the equation buffer and the LCD
	memset(equation, 0, MAX_INPUT_LENGTH);
 2b0:	80 e1       	ldi	r24, 0x10	; 16
 2b2:	f8 01       	movw	r30, r16
 2b4:	11 92       	st	Z+, r1
 2b6:	8a 95       	dec	r24
 2b8:	e9 f7       	brne	.-6      	; 0x2b4 <read_equation+0x12>
	lcd_4bit_clear();
 2ba:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_4bit_clear>
}

// Function to read the full equation from the keypad
void read_equation(char* equation) {
	// Variables to track the current index and maximum allowed input length
	int current_index = 0;
 2be:	c0 e0       	ldi	r28, 0x00	; 0
 2c0:	d0 e0       	ldi	r29, 0x00	; 0
	memset(equation, 0, MAX_INPUT_LENGTH);
	lcd_4bit_clear();

	while (1) {
		// Read the keypad
		char key = keypad_getKey();
 2c2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <keypad_getKey>

		// Check for numerical or operator keys
		if ((key >= '0' && key <= '9') || key == '+' || key == '-' || key == '*' || key == '/' || key == '(' || key == ')') {
 2c6:	90 ed       	ldi	r25, 0xD0	; 208
 2c8:	98 0f       	add	r25, r24
 2ca:	9a 30       	cpi	r25, 0x0A	; 10
 2cc:	60 f0       	brcs	.+24     	; 0x2e6 <read_equation+0x44>
 2ce:	8b 32       	cpi	r24, 0x2B	; 43
 2d0:	51 f0       	breq	.+20     	; 0x2e6 <read_equation+0x44>
 2d2:	8d 32       	cpi	r24, 0x2D	; 45
 2d4:	41 f0       	breq	.+16     	; 0x2e6 <read_equation+0x44>
 2d6:	8a 32       	cpi	r24, 0x2A	; 42
 2d8:	31 f0       	breq	.+12     	; 0x2e6 <read_equation+0x44>
 2da:	8f 32       	cpi	r24, 0x2F	; 47
 2dc:	21 f0       	breq	.+8      	; 0x2e6 <read_equation+0x44>
 2de:	88 32       	cpi	r24, 0x28	; 40
 2e0:	11 f0       	breq	.+4      	; 0x2e6 <read_equation+0x44>
 2e2:	89 32       	cpi	r24, 0x29	; 41
 2e4:	b9 f4       	brne	.+46     	; 0x314 <read_equation+0x72>
			// Append the key to the equation string
			if (current_index < max_input_length) {
 2e6:	cf 30       	cpi	r28, 0x0F	; 15
 2e8:	d1 05       	cpc	r29, r1
 2ea:	0c f5       	brge	.+66     	; 0x32e <read_equation+0x8c>
				equation[current_index++] = key;
 2ec:	7e 01       	movw	r14, r28
 2ee:	ff ef       	ldi	r31, 0xFF	; 255
 2f0:	ef 1a       	sub	r14, r31
 2f2:	ff 0a       	sbc	r15, r31
 2f4:	c0 0f       	add	r28, r16
 2f6:	d1 1f       	adc	r29, r17
 2f8:	88 83       	st	Y, r24
				equation[current_index] = '\0'; // Null-terminate the string
 2fa:	f8 01       	movw	r30, r16
 2fc:	ee 0d       	add	r30, r14
 2fe:	ff 1d       	adc	r31, r15
 300:	10 82       	st	Z, r1
				lcd_4bit_gotoxy(0, 0);
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_4bit_gotoxy>
				lcd_4bit_str(equation);
 30a:	c8 01       	movw	r24, r16
 30c:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_4bit_str>

		// Check for numerical or operator keys
		if ((key >= '0' && key <= '9') || key == '+' || key == '-' || key == '*' || key == '/' || key == '(' || key == ')') {
			// Append the key to the equation string
			if (current_index < max_input_length) {
				equation[current_index++] = key;
 310:	e7 01       	movw	r28, r14
 312:	0d c0       	rjmp	.+26     	; 0x32e <read_equation+0x8c>
				equation[current_index] = '\0'; // Null-terminate the string
				lcd_4bit_gotoxy(0, 0);
				lcd_4bit_str(equation);
			}
			} else if (key == '=') {
 314:	8d 33       	cpi	r24, 0x3D	; 61
 316:	a9 f0       	breq	.+42     	; 0x342 <read_equation+0xa0>
			// If the user presses '=', exit the loop and finish input
			break;
			} else if (key == '#') {
 318:	83 32       	cpi	r24, 0x23	; 35
 31a:	49 f4       	brne	.+18     	; 0x32e <read_equation+0x8c>
			// If the user presses '#', clear the input and start over
			current_index = 0;
			memset(equation, 0, MAX_INPUT_LENGTH);
 31c:	80 e1       	ldi	r24, 0x10	; 16
 31e:	f8 01       	movw	r30, r16
 320:	11 92       	st	Z+, r1
 322:	8a 95       	dec	r24
 324:	e9 f7       	brne	.-6      	; 0x320 <read_equation+0x7e>
			lcd_4bit_clear();
 326:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_4bit_clear>
			} else if (key == '=') {
			// If the user presses '=', exit the loop and finish input
			break;
			} else if (key == '#') {
			// If the user presses '#', clear the input and start over
			current_index = 0;
 32a:	c0 e0       	ldi	r28, 0x00	; 0
 32c:	d0 e0       	ldi	r29, 0x00	; 0
 32e:	ff ef       	ldi	r31, 0xFF	; 255
 330:	20 e7       	ldi	r18, 0x70	; 112
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	f1 50       	subi	r31, 0x01	; 1
 336:	20 40       	sbci	r18, 0x00	; 0
 338:	80 40       	sbci	r24, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <read_equation+0x92>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <read_equation+0x9c>
 33e:	00 00       	nop
 340:	c0 cf       	rjmp	.-128    	; 0x2c2 <read_equation+0x20>
		}

		// You may want to add a small delay here to prevent rapid input processing
		_delay_ms(100);
	}
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	0f 91       	pop	r16
 34a:	ff 90       	pop	r15
 34c:	ef 90       	pop	r14
 34e:	08 95       	ret

00000350 <is_operator>:

// Function to check if a character is an operator (+, -, *, /)
uint8_t is_operator(char c) {
	return (c == '+' || c == '-' || c == '*' || c == '/');
 350:	8b 32       	cpi	r24, 0x2B	; 43
 352:	41 f0       	breq	.+16     	; 0x364 <is_operator+0x14>
 354:	8d 32       	cpi	r24, 0x2D	; 45
 356:	41 f0       	breq	.+16     	; 0x368 <is_operator+0x18>
 358:	8a 32       	cpi	r24, 0x2A	; 42
 35a:	41 f0       	breq	.+16     	; 0x36c <is_operator+0x1c>
 35c:	8f 32       	cpi	r24, 0x2F	; 47
 35e:	41 f4       	brne	.+16     	; 0x370 <is_operator+0x20>
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	08 95       	ret
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	08 95       	ret
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	08 95       	ret
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	08 95       	ret
 370:	80 e0       	ldi	r24, 0x00	; 0
}
 372:	08 95       	ret

00000374 <get_precedence>:

// Function to get the precedence of an operator
int get_precedence(char c) {
	if (c == '+' || c == '-')
 374:	8b 32       	cpi	r24, 0x2B	; 43
 376:	49 f0       	breq	.+18     	; 0x38a <get_precedence+0x16>
 378:	8d 32       	cpi	r24, 0x2D	; 45
 37a:	51 f0       	breq	.+20     	; 0x390 <get_precedence+0x1c>
	return 1;
	else if (c == '*' || c == '/')
 37c:	8a 32       	cpi	r24, 0x2A	; 42
 37e:	59 f0       	breq	.+22     	; 0x396 <get_precedence+0x22>
 380:	8f 32       	cpi	r24, 0x2F	; 47
 382:	61 f4       	brne	.+24     	; 0x39c <get_precedence+0x28>
	return 2;
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	08 95       	ret
}

// Function to get the precedence of an operator
int get_precedence(char c) {
	if (c == '+' || c == '-')
	return 1;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	08 95       	ret
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	08 95       	ret
	else if (c == '*' || c == '/')
	return 2;
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	08 95       	ret
	return 0;
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	90 e0       	ldi	r25, 0x00	; 0
}
 3a0:	08 95       	ret

000003a2 <apply_operator>:

// Function to apply the operator to the operands
int apply_operator(int a, int b, char op) {
	switch (op) {
 3a2:	4b 32       	cpi	r20, 0x2B	; 43
 3a4:	49 f0       	breq	.+18     	; 0x3b8 <apply_operator+0x16>
 3a6:	18 f4       	brcc	.+6      	; 0x3ae <apply_operator+0xc>
 3a8:	4a 32       	cpi	r20, 0x2A	; 42
 3aa:	71 f0       	breq	.+28     	; 0x3c8 <apply_operator+0x26>
 3ac:	1c c0       	rjmp	.+56     	; 0x3e6 <apply_operator+0x44>
 3ae:	4d 32       	cpi	r20, 0x2D	; 45
 3b0:	39 f0       	breq	.+14     	; 0x3c0 <apply_operator+0x1e>
 3b2:	4f 32       	cpi	r20, 0x2F	; 47
 3b4:	89 f0       	breq	.+34     	; 0x3d8 <apply_operator+0x36>
 3b6:	17 c0       	rjmp	.+46     	; 0x3e6 <apply_operator+0x44>
		case '+':
		return a + b;
 3b8:	9c 01       	movw	r18, r24
 3ba:	26 0f       	add	r18, r22
 3bc:	37 1f       	adc	r19, r23
 3be:	18 c0       	rjmp	.+48     	; 0x3f0 <apply_operator+0x4e>
		case '-':
		return a - b;
 3c0:	9c 01       	movw	r18, r24
 3c2:	26 1b       	sub	r18, r22
 3c4:	37 0b       	sbc	r19, r23
 3c6:	14 c0       	rjmp	.+40     	; 0x3f0 <apply_operator+0x4e>
		case '*':
		return a * b;
 3c8:	86 9f       	mul	r24, r22
 3ca:	90 01       	movw	r18, r0
 3cc:	87 9f       	mul	r24, r23
 3ce:	30 0d       	add	r19, r0
 3d0:	96 9f       	mul	r25, r22
 3d2:	30 0d       	add	r19, r0
 3d4:	11 24       	eor	r1, r1
 3d6:	0c c0       	rjmp	.+24     	; 0x3f0 <apply_operator+0x4e>
		case '/':
		if (b != 0)
 3d8:	61 15       	cp	r22, r1
 3da:	71 05       	cpc	r23, r1
 3dc:	39 f0       	breq	.+14     	; 0x3ec <apply_operator+0x4a>
		return a / b;
 3de:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__divmodhi4>
 3e2:	9b 01       	movw	r18, r22
 3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <apply_operator+0x4e>
		// Handle division by zero error
		return 0;
		default:
		return 0; // Handle invalid operator
 3e6:	20 e0       	ldi	r18, 0x00	; 0
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <apply_operator+0x4e>
		return a * b;
		case '/':
		if (b != 0)
		return a / b;
		// Handle division by zero error
		return 0;
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	30 e0       	ldi	r19, 0x00	; 0
		default:
		return 0; // Handle invalid operator
	}
}
 3f0:	c9 01       	movw	r24, r18
 3f2:	08 95       	ret

000003f4 <evaluate_expression>:

// Function to evaluate the expression using operator precedence and BODMAS/BIDMAS
int evaluate_expression(const char* expression) {
 3f4:	6f 92       	push	r6
 3f6:	7f 92       	push	r7
 3f8:	8f 92       	push	r8
 3fa:	9f 92       	push	r9
 3fc:	af 92       	push	r10
 3fe:	bf 92       	push	r11
 400:	cf 92       	push	r12
 402:	df 92       	push	r13
 404:	ef 92       	push	r14
 406:	ff 92       	push	r15
 408:	0f 93       	push	r16
 40a:	1f 93       	push	r17
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
 414:	c0 56       	subi	r28, 0x60	; 96
 416:	d1 09       	sbc	r29, r1
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	f8 94       	cli
 41c:	de bf       	out	0x3e, r29	; 62
 41e:	0f be       	out	0x3f, r0	; 63
 420:	cd bf       	out	0x3d, r28	; 61
 422:	5c 01       	movw	r10, r24
	char operator_stack[32];
	int operand_top = -1;
	int operator_top = -1;

	// Loop through the expression character by character
	for (int i = 0; expression[i] != '\0'; i++) {
 424:	c1 2c       	mov	r12, r1
 426:	d1 2c       	mov	r13, r1
// Function to evaluate the expression using operator precedence and BODMAS/BIDMAS
int evaluate_expression(const char* expression) {
	int operand_stack[32];
	char operator_stack[32];
	int operand_top = -1;
	int operator_top = -1;
 428:	ee 24       	eor	r14, r14
 42a:	ea 94       	dec	r14
 42c:	fe 2c       	mov	r15, r14

// Function to evaluate the expression using operator precedence and BODMAS/BIDMAS
int evaluate_expression(const char* expression) {
	int operand_stack[32];
	char operator_stack[32];
	int operand_top = -1;
 42e:	0f ef       	ldi	r16, 0xFF	; 255
 430:	1f ef       	ldi	r17, 0xFF	; 255
	int operator_top = -1;

	// Loop through the expression character by character
	for (int i = 0; expression[i] != '\0'; i++) {
 432:	b2 c0       	rjmp	.+356    	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
		char current_char = expression[i];

		// If the current character is a space, skip it
		if (current_char == ' ')
 434:	20 e2       	ldi	r18, 0x20	; 32
 436:	62 16       	cp	r6, r18
 438:	09 f4       	brne	.+2      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 43a:	ab c0       	rjmp	.+342    	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
		continue;

		// If the current character is a digit, extract the whole number
		if (isdigit(current_char)) {
 43c:	26 2d       	mov	r18, r6
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	20 53       	subi	r18, 0x30	; 48
 442:	31 09       	sbc	r19, r1
 444:	2a 30       	cpi	r18, 0x0A	; 10
 446:	31 05       	cpc	r19, r1
 448:	00 f5       	brcc	.+64     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
			operand_top++;
 44a:	0f 5f       	subi	r16, 0xFF	; 255
 44c:	1f 4f       	sbci	r17, 0xFF	; 255
			// Convert the substring of digits to an integer using the 'atoi' function
			operand_stack[operand_top] = atoi(&expression[i]);
 44e:	cf 01       	movw	r24, r30
 450:	0e 94 a0 03 	call	0x740	; 0x740 <atoi>
 454:	f8 01       	movw	r30, r16
 456:	ee 0f       	add	r30, r30
 458:	ff 1f       	adc	r31, r31
 45a:	21 e0       	ldi	r18, 0x01	; 1
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	2c 0f       	add	r18, r28
 460:	3d 1f       	adc	r19, r29
 462:	e2 0f       	add	r30, r18
 464:	f3 1f       	adc	r31, r19
 466:	91 83       	std	Z+1, r25	; 0x01
 468:	80 83       	st	Z, r24
			// Update the index 'i' to the end of the current number
			while (isdigit(expression[i]))
 46a:	03 c0       	rjmp	.+6      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
			i++;
 46c:	3f ef       	ldi	r19, 0xFF	; 255
 46e:	c3 1a       	sub	r12, r19
 470:	d3 0a       	sbc	r13, r19
		if (isdigit(current_char)) {
			operand_top++;
			// Convert the substring of digits to an integer using the 'atoi' function
			operand_stack[operand_top] = atoi(&expression[i]);
			// Update the index 'i' to the end of the current number
			while (isdigit(expression[i]))
 472:	f5 01       	movw	r30, r10
 474:	ec 0d       	add	r30, r12
 476:	fd 1d       	adc	r31, r13
 478:	80 81       	ld	r24, Z
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	c0 97       	sbiw	r24, 0x30	; 48
 47e:	0a 97       	sbiw	r24, 0x0a	; 10
 480:	a8 f3       	brcs	.-22     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
			i++;
			i--; // To offset the loop's increment, so it doesn't skip the next character
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	c8 1a       	sub	r12, r24
 486:	d1 08       	sbc	r13, r1
 488:	84 c0       	rjmp	.+264    	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
			} else if (is_operator(current_char)) {
 48a:	86 2d       	mov	r24, r6
 48c:	0e 94 a8 01 	call	0x350	; 0x350 <is_operator>
 490:	81 11       	cpse	r24, r1
 492:	1f c0       	rjmp	.+62     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 494:	41 c0       	rjmp	.+130    	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
			// While there are operators on the top of the stack with higher or equal precedence,
			// apply the operators and operands on the stack
			while (operator_top >= 0 && is_operator(operator_stack[operator_top]) &&
			get_precedence(operator_stack[operator_top]) >= get_precedence(current_char)) {
				int b = operand_stack[operand_top];
 496:	f8 01       	movw	r30, r16
 498:	ee 0f       	add	r30, r30
 49a:	ff 1f       	adc	r31, r31
 49c:	21 e0       	ldi	r18, 0x01	; 1
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	2c 0f       	add	r18, r28
 4a2:	3d 1f       	adc	r19, r29
 4a4:	e2 0f       	add	r30, r18
 4a6:	f3 1f       	adc	r31, r19
 4a8:	60 81       	ld	r22, Z
 4aa:	71 81       	ldd	r23, Z+1	; 0x01
				operand_top--;
 4ac:	01 50       	subi	r16, 0x01	; 1
 4ae:	11 09       	sbc	r17, r1
				int a = operand_stack[operand_top];
 4b0:	48 01       	movw	r8, r16
 4b2:	88 0c       	add	r8, r8
 4b4:	99 1c       	adc	r9, r9
 4b6:	82 0e       	add	r8, r18
 4b8:	93 1e       	adc	r9, r19
				operand_top--;
				char op = operator_stack[operator_top];
				operator_top--;
 4ba:	31 e0       	ldi	r19, 0x01	; 1
 4bc:	e3 1a       	sub	r14, r19
 4be:	f1 08       	sbc	r15, r1
				// Apply the operator and push the result back to the operand stack
				int result = apply_operator(a, b, op);
 4c0:	47 2d       	mov	r20, r7
 4c2:	f4 01       	movw	r30, r8
 4c4:	80 81       	ld	r24, Z
 4c6:	91 81       	ldd	r25, Z+1	; 0x01
 4c8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <apply_operator>
				operand_top++;
				operand_stack[operand_top] = result;
 4cc:	f4 01       	movw	r30, r8
 4ce:	91 83       	std	Z+1, r25	; 0x01
 4d0:	80 83       	st	Z, r24
			i++;
			i--; // To offset the loop's increment, so it doesn't skip the next character
			} else if (is_operator(current_char)) {
			// While there are operators on the top of the stack with higher or equal precedence,
			// apply the operators and operands on the stack
			while (operator_top >= 0 && is_operator(operator_stack[operator_top]) &&
 4d2:	ff 20       	and	r15, r15
 4d4:	b4 f0       	brlt	.+44     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 4d6:	e1 e4       	ldi	r30, 0x41	; 65
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	ec 0f       	add	r30, r28
 4dc:	fd 1f       	adc	r31, r29
 4de:	ee 0d       	add	r30, r14
 4e0:	ff 1d       	adc	r31, r15
 4e2:	70 80       	ld	r7, Z
 4e4:	87 2d       	mov	r24, r7
 4e6:	0e 94 a8 01 	call	0x350	; 0x350 <is_operator>
 4ea:	88 23       	and	r24, r24
 4ec:	51 f0       	breq	.+20     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
			get_precedence(operator_stack[operator_top]) >= get_precedence(current_char)) {
 4ee:	87 2d       	mov	r24, r7
 4f0:	0e 94 ba 01 	call	0x374	; 0x374 <get_precedence>
 4f4:	4c 01       	movw	r8, r24
 4f6:	86 2d       	mov	r24, r6
 4f8:	0e 94 ba 01 	call	0x374	; 0x374 <get_precedence>
			i++;
			i--; // To offset the loop's increment, so it doesn't skip the next character
			} else if (is_operator(current_char)) {
			// While there are operators on the top of the stack with higher or equal precedence,
			// apply the operators and operands on the stack
			while (operator_top >= 0 && is_operator(operator_stack[operator_top]) &&
 4fc:	88 16       	cp	r8, r24
 4fe:	99 06       	cpc	r9, r25
 500:	54 f6       	brge	.-108    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
				int result = apply_operator(a, b, op);
				operand_top++;
				operand_stack[operand_top] = result;
			}
			// Push the current operator onto the operator stack
			operator_top++;
 502:	ff ef       	ldi	r31, 0xFF	; 255
 504:	ef 1a       	sub	r14, r31
 506:	ff 0a       	sbc	r15, r31
			operator_stack[operator_top] = current_char;
 508:	e1 e4       	ldi	r30, 0x41	; 65
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	ec 0f       	add	r30, r28
 50e:	fd 1f       	adc	r31, r29
 510:	ee 0d       	add	r30, r14
 512:	ff 1d       	adc	r31, r15
 514:	60 82       	st	Z, r6
 516:	3d c0       	rjmp	.+122    	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
			} else if (current_char == '(') {
 518:	28 e2       	ldi	r18, 0x28	; 40
 51a:	62 12       	cpse	r6, r18
 51c:	0b c0       	rjmp	.+22     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
			// Push the opening parenthesis onto the operator stack
			operator_top++;
 51e:	3f ef       	ldi	r19, 0xFF	; 255
 520:	e3 1a       	sub	r14, r19
 522:	f3 0a       	sbc	r15, r19
			operator_stack[operator_top] = current_char;
 524:	e1 e4       	ldi	r30, 0x41	; 65
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	ec 0f       	add	r30, r28
 52a:	fd 1f       	adc	r31, r29
 52c:	ee 0d       	add	r30, r14
 52e:	ff 1d       	adc	r31, r15
 530:	60 82       	st	Z, r6
 532:	2f c0       	rjmp	.+94     	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
			} else if (current_char == ')') {
 534:	89 e2       	ldi	r24, 0x29	; 41
 536:	68 12       	cpse	r6, r24
 538:	2c c0       	rjmp	.+88     	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
 53a:	1d c0       	rjmp	.+58     	; 0x576 <__EEPROM_REGION_LENGTH__+0x176>
			// While the top of the operator stack is not an opening parenthesis,
			// apply operators and operands to the result stack
			while (operator_top >= 0 && operator_stack[operator_top] != '(') {
				int b = operand_stack[operand_top];
 53c:	f8 01       	movw	r30, r16
 53e:	ee 0f       	add	r30, r30
 540:	ff 1f       	adc	r31, r31
 542:	21 e0       	ldi	r18, 0x01	; 1
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	2c 0f       	add	r18, r28
 548:	3d 1f       	adc	r19, r29
 54a:	e2 0f       	add	r30, r18
 54c:	f3 1f       	adc	r31, r19
 54e:	60 81       	ld	r22, Z
 550:	71 81       	ldd	r23, Z+1	; 0x01
				operand_top--;
 552:	01 50       	subi	r16, 0x01	; 1
 554:	11 09       	sbc	r17, r1
				int a = operand_stack[operand_top];
 556:	48 01       	movw	r8, r16
 558:	88 0c       	add	r8, r8
 55a:	99 1c       	adc	r9, r9
 55c:	82 0e       	add	r8, r18
 55e:	93 1e       	adc	r9, r19
				operand_top--;
				char op = operator_stack[operator_top];
				operator_top--;
 560:	31 e0       	ldi	r19, 0x01	; 1
 562:	e3 1a       	sub	r14, r19
 564:	f1 08       	sbc	r15, r1
				// Apply the operator and push the result back to the operand stack
				int result = apply_operator(a, b, op);
 566:	f4 01       	movw	r30, r8
 568:	80 81       	ld	r24, Z
 56a:	91 81       	ldd	r25, Z+1	; 0x01
 56c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <apply_operator>
				operand_top++;
				operand_stack[operand_top] = result;
 570:	f4 01       	movw	r30, r8
 572:	91 83       	std	Z+1, r25	; 0x01
 574:	80 83       	st	Z, r24
			operator_top++;
			operator_stack[operator_top] = current_char;
			} else if (current_char == ')') {
			// While the top of the operator stack is not an opening parenthesis,
			// apply operators and operands to the result stack
			while (operator_top >= 0 && operator_stack[operator_top] != '(') {
 576:	ff 20       	and	r15, r15
 578:	4c f0       	brlt	.+18     	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
 57a:	e1 e4       	ldi	r30, 0x41	; 65
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	ec 0f       	add	r30, r28
 580:	fd 1f       	adc	r31, r29
 582:	ee 0d       	add	r30, r14
 584:	ff 1d       	adc	r31, r15
 586:	40 81       	ld	r20, Z
 588:	48 32       	cpi	r20, 0x28	; 40
 58a:	c1 f6       	brne	.-80     	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
				int result = apply_operator(a, b, op);
				operand_top++;
				operand_stack[operand_top] = result;
			}
			// Pop the opening parenthesis from the operator stack
			operator_top--;
 58c:	f1 e0       	ldi	r31, 0x01	; 1
 58e:	ef 1a       	sub	r14, r31
 590:	f1 08       	sbc	r15, r1
	char operator_stack[32];
	int operand_top = -1;
	int operator_top = -1;

	// Loop through the expression character by character
	for (int i = 0; expression[i] != '\0'; i++) {
 592:	2f ef       	ldi	r18, 0xFF	; 255
 594:	c2 1a       	sub	r12, r18
 596:	d2 0a       	sbc	r13, r18
 598:	f5 01       	movw	r30, r10
 59a:	ec 0d       	add	r30, r12
 59c:	fd 1d       	adc	r31, r13
 59e:	60 80       	ld	r6, Z
 5a0:	61 10       	cpse	r6, r1
 5a2:	48 cf       	rjmp	.-368    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 5a4:	24 c0       	rjmp	.+72     	; 0x5ee <__EEPROM_REGION_LENGTH__+0x1ee>
	}

	// While there are operators on the top of the operator stack,
	// apply the operators and operands to the result stack
	while (operator_top >= 0) {
		int b = operand_stack[operand_top];
 5a6:	f8 01       	movw	r30, r16
 5a8:	ee 0f       	add	r30, r30
 5aa:	ff 1f       	adc	r31, r31
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	8c 0f       	add	r24, r28
 5b2:	9d 1f       	adc	r25, r29
 5b4:	e8 0f       	add	r30, r24
 5b6:	f9 1f       	adc	r31, r25
 5b8:	60 81       	ld	r22, Z
 5ba:	71 81       	ldd	r23, Z+1	; 0x01
		operand_top--;
 5bc:	01 50       	subi	r16, 0x01	; 1
 5be:	11 09       	sbc	r17, r1
		int a = operand_stack[operand_top];
 5c0:	68 01       	movw	r12, r16
 5c2:	cc 0c       	add	r12, r12
 5c4:	dd 1c       	adc	r13, r13
 5c6:	c8 0e       	add	r12, r24
 5c8:	d9 1e       	adc	r13, r25
		operand_top--;
		char op = operator_stack[operator_top];
 5ca:	e1 e4       	ldi	r30, 0x41	; 65
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	ec 0f       	add	r30, r28
 5d0:	fd 1f       	adc	r31, r29
 5d2:	ee 0d       	add	r30, r14
 5d4:	ff 1d       	adc	r31, r15
 5d6:	40 81       	ld	r20, Z
		operator_top--;
 5d8:	91 e0       	ldi	r25, 0x01	; 1
 5da:	e9 1a       	sub	r14, r25
 5dc:	f1 08       	sbc	r15, r1
		// Apply the operator and push the result back to the operand stack
		int result = apply_operator(a, b, op);
 5de:	f6 01       	movw	r30, r12
 5e0:	80 81       	ld	r24, Z
 5e2:	91 81       	ldd	r25, Z+1	; 0x01
 5e4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <apply_operator>
		operand_top++;
		operand_stack[operand_top] = result;
 5e8:	f6 01       	movw	r30, r12
 5ea:	91 83       	std	Z+1, r25	; 0x01
 5ec:	80 83       	st	Z, r24
		}
	}

	// While there are operators on the top of the operator stack,
	// apply the operators and operands to the result stack
	while (operator_top >= 0) {
 5ee:	ff 20       	and	r15, r15
 5f0:	d4 f6       	brge	.-76     	; 0x5a6 <__EEPROM_REGION_LENGTH__+0x1a6>
		operand_top++;
		operand_stack[operand_top] = result;
	}

	// The final result will be on the top of the operand stack
	return operand_stack[operand_top];
 5f2:	00 0f       	add	r16, r16
 5f4:	11 1f       	adc	r17, r17
 5f6:	e1 e0       	ldi	r30, 0x01	; 1
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	ec 0f       	add	r30, r28
 5fc:	fd 1f       	adc	r31, r29
 5fe:	e0 0f       	add	r30, r16
 600:	f1 1f       	adc	r31, r17
}
 602:	80 81       	ld	r24, Z
 604:	91 81       	ldd	r25, Z+1	; 0x01
 606:	c0 5a       	subi	r28, 0xA0	; 160
 608:	df 4f       	sbci	r29, 0xFF	; 255
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	f8 94       	cli
 60e:	de bf       	out	0x3e, r29	; 62
 610:	0f be       	out	0x3f, r0	; 63
 612:	cd bf       	out	0x3d, r28	; 61
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	1f 91       	pop	r17
 61a:	0f 91       	pop	r16
 61c:	ff 90       	pop	r15
 61e:	ef 90       	pop	r14
 620:	df 90       	pop	r13
 622:	cf 90       	pop	r12
 624:	bf 90       	pop	r11
 626:	af 90       	pop	r10
 628:	9f 90       	pop	r9
 62a:	8f 90       	pop	r8
 62c:	7f 90       	pop	r7
 62e:	6f 90       	pop	r6
 630:	08 95       	ret

00000632 <main>:
//Macros=============================//
#define MAX_INPUT_LENGTH 16

//The main program===================//
int main(void)
{
 632:	cf 93       	push	r28
 634:	df 93       	push	r29
 636:	cd b7       	in	r28, 0x3d	; 61
 638:	de b7       	in	r29, 0x3e	; 62
 63a:	6a 97       	sbiw	r28, 0x1a	; 26
 63c:	0f b6       	in	r0, 0x3f	; 63
 63e:	f8 94       	cli
 640:	de bf       	out	0x3e, r29	; 62
 642:	0f be       	out	0x3f, r0	; 63
 644:	cd bf       	out	0x3d, r28	; 61
	//Modules Initialization
    lcd_4bit_init();
 646:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_4bit_init>
	keypad_init();
 64a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <keypad_init>
	
	//Welcoming screen 
	lcd_4bit_gotoxy(0, 5);
 64e:	65 e0       	ldi	r22, 0x05	; 5
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_4bit_gotoxy>
	lcd_4bit_str("Welcome");
 656:	80 e7       	ldi	r24, 0x70	; 112
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_4bit_str>
 65e:	2f ef       	ldi	r18, 0xFF	; 255
 660:	89 e6       	ldi	r24, 0x69	; 105
 662:	98 e1       	ldi	r25, 0x18	; 24
 664:	21 50       	subi	r18, 0x01	; 1
 666:	80 40       	sbci	r24, 0x00	; 0
 668:	90 40       	sbci	r25, 0x00	; 0
 66a:	e1 f7       	brne	.-8      	; 0x664 <main+0x32>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <main+0x3c>
 66e:	00 00       	nop
	
	//Wait for one second to start 
	_delay_ms(1000);
	lcd_4bit_clear();
 670:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_4bit_clear>
	
	//Main loop
    while (1) 
    {
		//Cursor at home screen
		lcd_4bit_clear();
 674:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_4bit_clear>
		lcd_4bit_gotoxy(0, 0);
 678:	60 e0       	ldi	r22, 0x00	; 0
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_4bit_gotoxy>
		
		// Read the full equation from the user
		read_equation(equation);
 680:	ce 01       	movw	r24, r28
 682:	01 96       	adiw	r24, 0x01	; 1
 684:	0e 94 51 01 	call	0x2a2	; 0x2a2 <read_equation>

		// Evaluate the equation
		result = evaluate_expression(equation);
 688:	ce 01       	movw	r24, r28
 68a:	01 96       	adiw	r24, 0x01	; 1
 68c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <evaluate_expression>
		
		//Convert the result from (int) to (char*) and store it in buffer variable
		sprintf(buffer, "%d", result);
 690:	9f 93       	push	r25
 692:	8f 93       	push	r24
 694:	88 e7       	ldi	r24, 0x78	; 120
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	9f 93       	push	r25
 69a:	8f 93       	push	r24
 69c:	8e 01       	movw	r16, r28
 69e:	0f 5e       	subi	r16, 0xEF	; 239
 6a0:	1f 4f       	sbci	r17, 0xFF	; 255
 6a2:	1f 93       	push	r17
 6a4:	0f 93       	push	r16
 6a6:	0e 94 c6 03 	call	0x78c	; 0x78c <sprintf>
	
		//Display the result 
		lcd_4bit_gotoxy(1, (MAX_INPUT_LENGTH - strlen(buffer)));
 6aa:	f8 01       	movw	r30, r16
 6ac:	01 90       	ld	r0, Z+
 6ae:	00 20       	and	r0, r0
 6b0:	e9 f7       	brne	.-6      	; 0x6ac <main+0x7a>
 6b2:	31 97       	sbiw	r30, 0x01	; 1
 6b4:	e0 1b       	sub	r30, r16
 6b6:	f1 0b       	sbc	r31, r17
 6b8:	60 e1       	ldi	r22, 0x10	; 16
 6ba:	6e 1b       	sub	r22, r30
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_4bit_gotoxy>
		lcd_4bit_str(buffer);
 6c2:	c8 01       	movw	r24, r16
 6c4:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_4bit_str>
		
		//Waiting till clear button pressed
		char key = keypad_getKey();
 6c8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <keypad_getKey>
		while(key != '#');
 6cc:	0f 90       	pop	r0
 6ce:	0f 90       	pop	r0
 6d0:	0f 90       	pop	r0
 6d2:	0f 90       	pop	r0
 6d4:	0f 90       	pop	r0
 6d6:	0f 90       	pop	r0
 6d8:	83 32       	cpi	r24, 0x23	; 35
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <main+0xa6>
 6dc:	2f ef       	ldi	r18, 0xFF	; 255
 6de:	80 e7       	ldi	r24, 0x70	; 112
 6e0:	92 e0       	ldi	r25, 0x02	; 2
 6e2:	21 50       	subi	r18, 0x01	; 1
 6e4:	80 40       	sbci	r24, 0x00	; 0
 6e6:	90 40       	sbci	r25, 0x00	; 0
 6e8:	e1 f7       	brne	.-8      	; 0x6e2 <main+0xb0>
 6ea:	00 c0       	rjmp	.+0      	; 0x6ec <main+0xba>
 6ec:	00 00       	nop
 6ee:	c2 cf       	rjmp	.-124    	; 0x674 <main+0x42>

000006f0 <__divmodhi4>:
 6f0:	97 fb       	bst	r25, 7
 6f2:	07 2e       	mov	r0, r23
 6f4:	16 f4       	brtc	.+4      	; 0x6fa <__divmodhi4+0xa>
 6f6:	00 94       	com	r0
 6f8:	07 d0       	rcall	.+14     	; 0x708 <__divmodhi4_neg1>
 6fa:	77 fd       	sbrc	r23, 7
 6fc:	09 d0       	rcall	.+18     	; 0x710 <__divmodhi4_neg2>
 6fe:	0e 94 8c 03 	call	0x718	; 0x718 <__udivmodhi4>
 702:	07 fc       	sbrc	r0, 7
 704:	05 d0       	rcall	.+10     	; 0x710 <__divmodhi4_neg2>
 706:	3e f4       	brtc	.+14     	; 0x716 <__divmodhi4_exit>

00000708 <__divmodhi4_neg1>:
 708:	90 95       	com	r25
 70a:	81 95       	neg	r24
 70c:	9f 4f       	sbci	r25, 0xFF	; 255
 70e:	08 95       	ret

00000710 <__divmodhi4_neg2>:
 710:	70 95       	com	r23
 712:	61 95       	neg	r22
 714:	7f 4f       	sbci	r23, 0xFF	; 255

00000716 <__divmodhi4_exit>:
 716:	08 95       	ret

00000718 <__udivmodhi4>:
 718:	aa 1b       	sub	r26, r26
 71a:	bb 1b       	sub	r27, r27
 71c:	51 e1       	ldi	r21, 0x11	; 17
 71e:	07 c0       	rjmp	.+14     	; 0x72e <__udivmodhi4_ep>

00000720 <__udivmodhi4_loop>:
 720:	aa 1f       	adc	r26, r26
 722:	bb 1f       	adc	r27, r27
 724:	a6 17       	cp	r26, r22
 726:	b7 07       	cpc	r27, r23
 728:	10 f0       	brcs	.+4      	; 0x72e <__udivmodhi4_ep>
 72a:	a6 1b       	sub	r26, r22
 72c:	b7 0b       	sbc	r27, r23

0000072e <__udivmodhi4_ep>:
 72e:	88 1f       	adc	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	5a 95       	dec	r21
 734:	a9 f7       	brne	.-22     	; 0x720 <__udivmodhi4_loop>
 736:	80 95       	com	r24
 738:	90 95       	com	r25
 73a:	bc 01       	movw	r22, r24
 73c:	cd 01       	movw	r24, r26
 73e:	08 95       	ret

00000740 <atoi>:
 740:	fc 01       	movw	r30, r24
 742:	88 27       	eor	r24, r24
 744:	99 27       	eor	r25, r25
 746:	e8 94       	clt
 748:	21 91       	ld	r18, Z+
 74a:	20 32       	cpi	r18, 0x20	; 32
 74c:	e9 f3       	breq	.-6      	; 0x748 <atoi+0x8>
 74e:	29 30       	cpi	r18, 0x09	; 9
 750:	10 f0       	brcs	.+4      	; 0x756 <atoi+0x16>
 752:	2e 30       	cpi	r18, 0x0E	; 14
 754:	c8 f3       	brcs	.-14     	; 0x748 <atoi+0x8>
 756:	2b 32       	cpi	r18, 0x2B	; 43
 758:	41 f0       	breq	.+16     	; 0x76a <atoi+0x2a>
 75a:	2d 32       	cpi	r18, 0x2D	; 45
 75c:	39 f4       	brne	.+14     	; 0x76c <atoi+0x2c>
 75e:	68 94       	set
 760:	04 c0       	rjmp	.+8      	; 0x76a <atoi+0x2a>
 762:	0e 94 be 03 	call	0x77c	; 0x77c <__mulhi_const_10>
 766:	82 0f       	add	r24, r18
 768:	91 1d       	adc	r25, r1
 76a:	21 91       	ld	r18, Z+
 76c:	20 53       	subi	r18, 0x30	; 48
 76e:	2a 30       	cpi	r18, 0x0A	; 10
 770:	c0 f3       	brcs	.-16     	; 0x762 <atoi+0x22>
 772:	1e f4       	brtc	.+6      	; 0x77a <atoi+0x3a>
 774:	90 95       	com	r25
 776:	81 95       	neg	r24
 778:	9f 4f       	sbci	r25, 0xFF	; 255
 77a:	08 95       	ret

0000077c <__mulhi_const_10>:
 77c:	7a e0       	ldi	r23, 0x0A	; 10
 77e:	97 9f       	mul	r25, r23
 780:	90 2d       	mov	r25, r0
 782:	87 9f       	mul	r24, r23
 784:	80 2d       	mov	r24, r0
 786:	91 0d       	add	r25, r1
 788:	11 24       	eor	r1, r1
 78a:	08 95       	ret

0000078c <sprintf>:
 78c:	ae e0       	ldi	r26, 0x0E	; 14
 78e:	b0 e0       	ldi	r27, 0x00	; 0
 790:	ec ec       	ldi	r30, 0xCC	; 204
 792:	f3 e0       	ldi	r31, 0x03	; 3
 794:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <__prologue_saves__+0x1c>
 798:	0d 89       	ldd	r16, Y+21	; 0x15
 79a:	1e 89       	ldd	r17, Y+22	; 0x16
 79c:	86 e0       	ldi	r24, 0x06	; 6
 79e:	8c 83       	std	Y+4, r24	; 0x04
 7a0:	1a 83       	std	Y+2, r17	; 0x02
 7a2:	09 83       	std	Y+1, r16	; 0x01
 7a4:	8f ef       	ldi	r24, 0xFF	; 255
 7a6:	9f e7       	ldi	r25, 0x7F	; 127
 7a8:	9e 83       	std	Y+6, r25	; 0x06
 7aa:	8d 83       	std	Y+5, r24	; 0x05
 7ac:	ae 01       	movw	r20, r28
 7ae:	47 5e       	subi	r20, 0xE7	; 231
 7b0:	5f 4f       	sbci	r21, 0xFF	; 255
 7b2:	6f 89       	ldd	r22, Y+23	; 0x17
 7b4:	78 8d       	ldd	r23, Y+24	; 0x18
 7b6:	ce 01       	movw	r24, r28
 7b8:	01 96       	adiw	r24, 0x01	; 1
 7ba:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <vfprintf>
 7be:	ef 81       	ldd	r30, Y+7	; 0x07
 7c0:	f8 85       	ldd	r31, Y+8	; 0x08
 7c2:	e0 0f       	add	r30, r16
 7c4:	f1 1f       	adc	r31, r17
 7c6:	10 82       	st	Z, r1
 7c8:	2e 96       	adiw	r28, 0x0e	; 14
 7ca:	e4 e0       	ldi	r30, 0x04	; 4
 7cc:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__epilogue_restores__+0x1c>

000007d0 <vfprintf>:
 7d0:	ab e0       	ldi	r26, 0x0B	; 11
 7d2:	b0 e0       	ldi	r27, 0x00	; 0
 7d4:	ee ee       	ldi	r30, 0xEE	; 238
 7d6:	f3 e0       	ldi	r31, 0x03	; 3
 7d8:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <__prologue_saves__>
 7dc:	6c 01       	movw	r12, r24
 7de:	7b 01       	movw	r14, r22
 7e0:	8a 01       	movw	r16, r20
 7e2:	fc 01       	movw	r30, r24
 7e4:	17 82       	std	Z+7, r1	; 0x07
 7e6:	16 82       	std	Z+6, r1	; 0x06
 7e8:	83 81       	ldd	r24, Z+3	; 0x03
 7ea:	81 ff       	sbrs	r24, 1
 7ec:	cc c1       	rjmp	.+920    	; 0xb86 <__stack+0x327>
 7ee:	ce 01       	movw	r24, r28
 7f0:	01 96       	adiw	r24, 0x01	; 1
 7f2:	3c 01       	movw	r6, r24
 7f4:	f6 01       	movw	r30, r12
 7f6:	93 81       	ldd	r25, Z+3	; 0x03
 7f8:	f7 01       	movw	r30, r14
 7fa:	93 fd       	sbrc	r25, 3
 7fc:	85 91       	lpm	r24, Z+
 7fe:	93 ff       	sbrs	r25, 3
 800:	81 91       	ld	r24, Z+
 802:	7f 01       	movw	r14, r30
 804:	88 23       	and	r24, r24
 806:	09 f4       	brne	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 808:	ba c1       	rjmp	.+884    	; 0xb7e <__stack+0x31f>
 80a:	85 32       	cpi	r24, 0x25	; 37
 80c:	39 f4       	brne	.+14     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 80e:	93 fd       	sbrc	r25, 3
 810:	85 91       	lpm	r24, Z+
 812:	93 ff       	sbrs	r25, 3
 814:	81 91       	ld	r24, Z+
 816:	7f 01       	movw	r14, r30
 818:	85 32       	cpi	r24, 0x25	; 37
 81a:	29 f4       	brne	.+10     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 81c:	b6 01       	movw	r22, r12
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0e 94 df 05 	call	0xbbe	; 0xbbe <fputc>
 824:	e7 cf       	rjmp	.-50     	; 0x7f4 <vfprintf+0x24>
 826:	91 2c       	mov	r9, r1
 828:	21 2c       	mov	r2, r1
 82a:	31 2c       	mov	r3, r1
 82c:	ff e1       	ldi	r31, 0x1F	; 31
 82e:	f3 15       	cp	r31, r3
 830:	d8 f0       	brcs	.+54     	; 0x868 <__stack+0x9>
 832:	8b 32       	cpi	r24, 0x2B	; 43
 834:	79 f0       	breq	.+30     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 836:	38 f4       	brcc	.+14     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 838:	80 32       	cpi	r24, 0x20	; 32
 83a:	79 f0       	breq	.+30     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 83c:	83 32       	cpi	r24, 0x23	; 35
 83e:	a1 f4       	brne	.+40     	; 0x868 <__stack+0x9>
 840:	23 2d       	mov	r18, r3
 842:	20 61       	ori	r18, 0x10	; 16
 844:	1d c0       	rjmp	.+58     	; 0x880 <__stack+0x21>
 846:	8d 32       	cpi	r24, 0x2D	; 45
 848:	61 f0       	breq	.+24     	; 0x862 <__stack+0x3>
 84a:	80 33       	cpi	r24, 0x30	; 48
 84c:	69 f4       	brne	.+26     	; 0x868 <__stack+0x9>
 84e:	23 2d       	mov	r18, r3
 850:	21 60       	ori	r18, 0x01	; 1
 852:	16 c0       	rjmp	.+44     	; 0x880 <__stack+0x21>
 854:	83 2d       	mov	r24, r3
 856:	82 60       	ori	r24, 0x02	; 2
 858:	38 2e       	mov	r3, r24
 85a:	e3 2d       	mov	r30, r3
 85c:	e4 60       	ori	r30, 0x04	; 4
 85e:	3e 2e       	mov	r3, r30
 860:	2a c0       	rjmp	.+84     	; 0x8b6 <__stack+0x57>
 862:	f3 2d       	mov	r31, r3
 864:	f8 60       	ori	r31, 0x08	; 8
 866:	1d c0       	rjmp	.+58     	; 0x8a2 <__stack+0x43>
 868:	37 fc       	sbrc	r3, 7
 86a:	2d c0       	rjmp	.+90     	; 0x8c6 <__stack+0x67>
 86c:	20 ed       	ldi	r18, 0xD0	; 208
 86e:	28 0f       	add	r18, r24
 870:	2a 30       	cpi	r18, 0x0A	; 10
 872:	40 f0       	brcs	.+16     	; 0x884 <__stack+0x25>
 874:	8e 32       	cpi	r24, 0x2E	; 46
 876:	b9 f4       	brne	.+46     	; 0x8a6 <__stack+0x47>
 878:	36 fc       	sbrc	r3, 6
 87a:	81 c1       	rjmp	.+770    	; 0xb7e <__stack+0x31f>
 87c:	23 2d       	mov	r18, r3
 87e:	20 64       	ori	r18, 0x40	; 64
 880:	32 2e       	mov	r3, r18
 882:	19 c0       	rjmp	.+50     	; 0x8b6 <__stack+0x57>
 884:	36 fe       	sbrs	r3, 6
 886:	06 c0       	rjmp	.+12     	; 0x894 <__stack+0x35>
 888:	8a e0       	ldi	r24, 0x0A	; 10
 88a:	98 9e       	mul	r9, r24
 88c:	20 0d       	add	r18, r0
 88e:	11 24       	eor	r1, r1
 890:	92 2e       	mov	r9, r18
 892:	11 c0       	rjmp	.+34     	; 0x8b6 <__stack+0x57>
 894:	ea e0       	ldi	r30, 0x0A	; 10
 896:	2e 9e       	mul	r2, r30
 898:	20 0d       	add	r18, r0
 89a:	11 24       	eor	r1, r1
 89c:	22 2e       	mov	r2, r18
 89e:	f3 2d       	mov	r31, r3
 8a0:	f0 62       	ori	r31, 0x20	; 32
 8a2:	3f 2e       	mov	r3, r31
 8a4:	08 c0       	rjmp	.+16     	; 0x8b6 <__stack+0x57>
 8a6:	8c 36       	cpi	r24, 0x6C	; 108
 8a8:	21 f4       	brne	.+8      	; 0x8b2 <__stack+0x53>
 8aa:	83 2d       	mov	r24, r3
 8ac:	80 68       	ori	r24, 0x80	; 128
 8ae:	38 2e       	mov	r3, r24
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <__stack+0x57>
 8b2:	88 36       	cpi	r24, 0x68	; 104
 8b4:	41 f4       	brne	.+16     	; 0x8c6 <__stack+0x67>
 8b6:	f7 01       	movw	r30, r14
 8b8:	93 fd       	sbrc	r25, 3
 8ba:	85 91       	lpm	r24, Z+
 8bc:	93 ff       	sbrs	r25, 3
 8be:	81 91       	ld	r24, Z+
 8c0:	7f 01       	movw	r14, r30
 8c2:	81 11       	cpse	r24, r1
 8c4:	b3 cf       	rjmp	.-154    	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 8c6:	98 2f       	mov	r25, r24
 8c8:	9f 7d       	andi	r25, 0xDF	; 223
 8ca:	95 54       	subi	r25, 0x45	; 69
 8cc:	93 30       	cpi	r25, 0x03	; 3
 8ce:	28 f4       	brcc	.+10     	; 0x8da <__stack+0x7b>
 8d0:	0c 5f       	subi	r16, 0xFC	; 252
 8d2:	1f 4f       	sbci	r17, 0xFF	; 255
 8d4:	9f e3       	ldi	r25, 0x3F	; 63
 8d6:	99 83       	std	Y+1, r25	; 0x01
 8d8:	0d c0       	rjmp	.+26     	; 0x8f4 <__stack+0x95>
 8da:	83 36       	cpi	r24, 0x63	; 99
 8dc:	31 f0       	breq	.+12     	; 0x8ea <__stack+0x8b>
 8de:	83 37       	cpi	r24, 0x73	; 115
 8e0:	71 f0       	breq	.+28     	; 0x8fe <__stack+0x9f>
 8e2:	83 35       	cpi	r24, 0x53	; 83
 8e4:	09 f0       	breq	.+2      	; 0x8e8 <__stack+0x89>
 8e6:	59 c0       	rjmp	.+178    	; 0x99a <__stack+0x13b>
 8e8:	21 c0       	rjmp	.+66     	; 0x92c <__stack+0xcd>
 8ea:	f8 01       	movw	r30, r16
 8ec:	80 81       	ld	r24, Z
 8ee:	89 83       	std	Y+1, r24	; 0x01
 8f0:	0e 5f       	subi	r16, 0xFE	; 254
 8f2:	1f 4f       	sbci	r17, 0xFF	; 255
 8f4:	88 24       	eor	r8, r8
 8f6:	83 94       	inc	r8
 8f8:	91 2c       	mov	r9, r1
 8fa:	53 01       	movw	r10, r6
 8fc:	13 c0       	rjmp	.+38     	; 0x924 <__stack+0xc5>
 8fe:	28 01       	movw	r4, r16
 900:	f2 e0       	ldi	r31, 0x02	; 2
 902:	4f 0e       	add	r4, r31
 904:	51 1c       	adc	r5, r1
 906:	f8 01       	movw	r30, r16
 908:	a0 80       	ld	r10, Z
 90a:	b1 80       	ldd	r11, Z+1	; 0x01
 90c:	36 fe       	sbrs	r3, 6
 90e:	03 c0       	rjmp	.+6      	; 0x916 <__stack+0xb7>
 910:	69 2d       	mov	r22, r9
 912:	70 e0       	ldi	r23, 0x00	; 0
 914:	02 c0       	rjmp	.+4      	; 0x91a <__stack+0xbb>
 916:	6f ef       	ldi	r22, 0xFF	; 255
 918:	7f ef       	ldi	r23, 0xFF	; 255
 91a:	c5 01       	movw	r24, r10
 91c:	0e 94 d4 05 	call	0xba8	; 0xba8 <strnlen>
 920:	4c 01       	movw	r8, r24
 922:	82 01       	movw	r16, r4
 924:	f3 2d       	mov	r31, r3
 926:	ff 77       	andi	r31, 0x7F	; 127
 928:	3f 2e       	mov	r3, r31
 92a:	16 c0       	rjmp	.+44     	; 0x958 <__stack+0xf9>
 92c:	28 01       	movw	r4, r16
 92e:	22 e0       	ldi	r18, 0x02	; 2
 930:	42 0e       	add	r4, r18
 932:	51 1c       	adc	r5, r1
 934:	f8 01       	movw	r30, r16
 936:	a0 80       	ld	r10, Z
 938:	b1 80       	ldd	r11, Z+1	; 0x01
 93a:	36 fe       	sbrs	r3, 6
 93c:	03 c0       	rjmp	.+6      	; 0x944 <__stack+0xe5>
 93e:	69 2d       	mov	r22, r9
 940:	70 e0       	ldi	r23, 0x00	; 0
 942:	02 c0       	rjmp	.+4      	; 0x948 <__stack+0xe9>
 944:	6f ef       	ldi	r22, 0xFF	; 255
 946:	7f ef       	ldi	r23, 0xFF	; 255
 948:	c5 01       	movw	r24, r10
 94a:	0e 94 c9 05 	call	0xb92	; 0xb92 <strnlen_P>
 94e:	4c 01       	movw	r8, r24
 950:	f3 2d       	mov	r31, r3
 952:	f0 68       	ori	r31, 0x80	; 128
 954:	3f 2e       	mov	r3, r31
 956:	82 01       	movw	r16, r4
 958:	33 fc       	sbrc	r3, 3
 95a:	1b c0       	rjmp	.+54     	; 0x992 <__stack+0x133>
 95c:	82 2d       	mov	r24, r2
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	88 16       	cp	r8, r24
 962:	99 06       	cpc	r9, r25
 964:	b0 f4       	brcc	.+44     	; 0x992 <__stack+0x133>
 966:	b6 01       	movw	r22, r12
 968:	80 e2       	ldi	r24, 0x20	; 32
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	0e 94 df 05 	call	0xbbe	; 0xbbe <fputc>
 970:	2a 94       	dec	r2
 972:	f4 cf       	rjmp	.-24     	; 0x95c <__stack+0xfd>
 974:	f5 01       	movw	r30, r10
 976:	37 fc       	sbrc	r3, 7
 978:	85 91       	lpm	r24, Z+
 97a:	37 fe       	sbrs	r3, 7
 97c:	81 91       	ld	r24, Z+
 97e:	5f 01       	movw	r10, r30
 980:	b6 01       	movw	r22, r12
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	0e 94 df 05 	call	0xbbe	; 0xbbe <fputc>
 988:	21 10       	cpse	r2, r1
 98a:	2a 94       	dec	r2
 98c:	21 e0       	ldi	r18, 0x01	; 1
 98e:	82 1a       	sub	r8, r18
 990:	91 08       	sbc	r9, r1
 992:	81 14       	cp	r8, r1
 994:	91 04       	cpc	r9, r1
 996:	71 f7       	brne	.-36     	; 0x974 <__stack+0x115>
 998:	e8 c0       	rjmp	.+464    	; 0xb6a <__stack+0x30b>
 99a:	84 36       	cpi	r24, 0x64	; 100
 99c:	11 f0       	breq	.+4      	; 0x9a2 <__stack+0x143>
 99e:	89 36       	cpi	r24, 0x69	; 105
 9a0:	41 f5       	brne	.+80     	; 0x9f2 <__stack+0x193>
 9a2:	f8 01       	movw	r30, r16
 9a4:	37 fe       	sbrs	r3, 7
 9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <__stack+0x157>
 9a8:	60 81       	ld	r22, Z
 9aa:	71 81       	ldd	r23, Z+1	; 0x01
 9ac:	82 81       	ldd	r24, Z+2	; 0x02
 9ae:	93 81       	ldd	r25, Z+3	; 0x03
 9b0:	0c 5f       	subi	r16, 0xFC	; 252
 9b2:	1f 4f       	sbci	r17, 0xFF	; 255
 9b4:	08 c0       	rjmp	.+16     	; 0x9c6 <__stack+0x167>
 9b6:	60 81       	ld	r22, Z
 9b8:	71 81       	ldd	r23, Z+1	; 0x01
 9ba:	07 2e       	mov	r0, r23
 9bc:	00 0c       	add	r0, r0
 9be:	88 0b       	sbc	r24, r24
 9c0:	99 0b       	sbc	r25, r25
 9c2:	0e 5f       	subi	r16, 0xFE	; 254
 9c4:	1f 4f       	sbci	r17, 0xFF	; 255
 9c6:	f3 2d       	mov	r31, r3
 9c8:	ff 76       	andi	r31, 0x6F	; 111
 9ca:	3f 2e       	mov	r3, r31
 9cc:	97 ff       	sbrs	r25, 7
 9ce:	09 c0       	rjmp	.+18     	; 0x9e2 <__stack+0x183>
 9d0:	90 95       	com	r25
 9d2:	80 95       	com	r24
 9d4:	70 95       	com	r23
 9d6:	61 95       	neg	r22
 9d8:	7f 4f       	sbci	r23, 0xFF	; 255
 9da:	8f 4f       	sbci	r24, 0xFF	; 255
 9dc:	9f 4f       	sbci	r25, 0xFF	; 255
 9de:	f0 68       	ori	r31, 0x80	; 128
 9e0:	3f 2e       	mov	r3, r31
 9e2:	2a e0       	ldi	r18, 0x0A	; 10
 9e4:	30 e0       	ldi	r19, 0x00	; 0
 9e6:	a3 01       	movw	r20, r6
 9e8:	0e 94 1b 06 	call	0xc36	; 0xc36 <__ultoa_invert>
 9ec:	88 2e       	mov	r8, r24
 9ee:	86 18       	sub	r8, r6
 9f0:	45 c0       	rjmp	.+138    	; 0xa7c <__stack+0x21d>
 9f2:	85 37       	cpi	r24, 0x75	; 117
 9f4:	31 f4       	brne	.+12     	; 0xa02 <__stack+0x1a3>
 9f6:	23 2d       	mov	r18, r3
 9f8:	2f 7e       	andi	r18, 0xEF	; 239
 9fa:	b2 2e       	mov	r11, r18
 9fc:	2a e0       	ldi	r18, 0x0A	; 10
 9fe:	30 e0       	ldi	r19, 0x00	; 0
 a00:	25 c0       	rjmp	.+74     	; 0xa4c <__stack+0x1ed>
 a02:	93 2d       	mov	r25, r3
 a04:	99 7f       	andi	r25, 0xF9	; 249
 a06:	b9 2e       	mov	r11, r25
 a08:	8f 36       	cpi	r24, 0x6F	; 111
 a0a:	c1 f0       	breq	.+48     	; 0xa3c <__stack+0x1dd>
 a0c:	18 f4       	brcc	.+6      	; 0xa14 <__stack+0x1b5>
 a0e:	88 35       	cpi	r24, 0x58	; 88
 a10:	79 f0       	breq	.+30     	; 0xa30 <__stack+0x1d1>
 a12:	b5 c0       	rjmp	.+362    	; 0xb7e <__stack+0x31f>
 a14:	80 37       	cpi	r24, 0x70	; 112
 a16:	19 f0       	breq	.+6      	; 0xa1e <__stack+0x1bf>
 a18:	88 37       	cpi	r24, 0x78	; 120
 a1a:	21 f0       	breq	.+8      	; 0xa24 <__stack+0x1c5>
 a1c:	b0 c0       	rjmp	.+352    	; 0xb7e <__stack+0x31f>
 a1e:	e9 2f       	mov	r30, r25
 a20:	e0 61       	ori	r30, 0x10	; 16
 a22:	be 2e       	mov	r11, r30
 a24:	b4 fe       	sbrs	r11, 4
 a26:	0d c0       	rjmp	.+26     	; 0xa42 <__stack+0x1e3>
 a28:	fb 2d       	mov	r31, r11
 a2a:	f4 60       	ori	r31, 0x04	; 4
 a2c:	bf 2e       	mov	r11, r31
 a2e:	09 c0       	rjmp	.+18     	; 0xa42 <__stack+0x1e3>
 a30:	34 fe       	sbrs	r3, 4
 a32:	0a c0       	rjmp	.+20     	; 0xa48 <__stack+0x1e9>
 a34:	29 2f       	mov	r18, r25
 a36:	26 60       	ori	r18, 0x06	; 6
 a38:	b2 2e       	mov	r11, r18
 a3a:	06 c0       	rjmp	.+12     	; 0xa48 <__stack+0x1e9>
 a3c:	28 e0       	ldi	r18, 0x08	; 8
 a3e:	30 e0       	ldi	r19, 0x00	; 0
 a40:	05 c0       	rjmp	.+10     	; 0xa4c <__stack+0x1ed>
 a42:	20 e1       	ldi	r18, 0x10	; 16
 a44:	30 e0       	ldi	r19, 0x00	; 0
 a46:	02 c0       	rjmp	.+4      	; 0xa4c <__stack+0x1ed>
 a48:	20 e1       	ldi	r18, 0x10	; 16
 a4a:	32 e0       	ldi	r19, 0x02	; 2
 a4c:	f8 01       	movw	r30, r16
 a4e:	b7 fe       	sbrs	r11, 7
 a50:	07 c0       	rjmp	.+14     	; 0xa60 <__stack+0x201>
 a52:	60 81       	ld	r22, Z
 a54:	71 81       	ldd	r23, Z+1	; 0x01
 a56:	82 81       	ldd	r24, Z+2	; 0x02
 a58:	93 81       	ldd	r25, Z+3	; 0x03
 a5a:	0c 5f       	subi	r16, 0xFC	; 252
 a5c:	1f 4f       	sbci	r17, 0xFF	; 255
 a5e:	06 c0       	rjmp	.+12     	; 0xa6c <__stack+0x20d>
 a60:	60 81       	ld	r22, Z
 a62:	71 81       	ldd	r23, Z+1	; 0x01
 a64:	80 e0       	ldi	r24, 0x00	; 0
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	0e 5f       	subi	r16, 0xFE	; 254
 a6a:	1f 4f       	sbci	r17, 0xFF	; 255
 a6c:	a3 01       	movw	r20, r6
 a6e:	0e 94 1b 06 	call	0xc36	; 0xc36 <__ultoa_invert>
 a72:	88 2e       	mov	r8, r24
 a74:	86 18       	sub	r8, r6
 a76:	fb 2d       	mov	r31, r11
 a78:	ff 77       	andi	r31, 0x7F	; 127
 a7a:	3f 2e       	mov	r3, r31
 a7c:	36 fe       	sbrs	r3, 6
 a7e:	0d c0       	rjmp	.+26     	; 0xa9a <__stack+0x23b>
 a80:	23 2d       	mov	r18, r3
 a82:	2e 7f       	andi	r18, 0xFE	; 254
 a84:	a2 2e       	mov	r10, r18
 a86:	89 14       	cp	r8, r9
 a88:	58 f4       	brcc	.+22     	; 0xaa0 <__stack+0x241>
 a8a:	34 fe       	sbrs	r3, 4
 a8c:	0b c0       	rjmp	.+22     	; 0xaa4 <__stack+0x245>
 a8e:	32 fc       	sbrc	r3, 2
 a90:	09 c0       	rjmp	.+18     	; 0xaa4 <__stack+0x245>
 a92:	83 2d       	mov	r24, r3
 a94:	8e 7e       	andi	r24, 0xEE	; 238
 a96:	a8 2e       	mov	r10, r24
 a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__stack+0x245>
 a9a:	b8 2c       	mov	r11, r8
 a9c:	a3 2c       	mov	r10, r3
 a9e:	03 c0       	rjmp	.+6      	; 0xaa6 <__stack+0x247>
 aa0:	b8 2c       	mov	r11, r8
 aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <__stack+0x247>
 aa4:	b9 2c       	mov	r11, r9
 aa6:	a4 fe       	sbrs	r10, 4
 aa8:	0f c0       	rjmp	.+30     	; 0xac8 <__stack+0x269>
 aaa:	fe 01       	movw	r30, r28
 aac:	e8 0d       	add	r30, r8
 aae:	f1 1d       	adc	r31, r1
 ab0:	80 81       	ld	r24, Z
 ab2:	80 33       	cpi	r24, 0x30	; 48
 ab4:	21 f4       	brne	.+8      	; 0xabe <__stack+0x25f>
 ab6:	9a 2d       	mov	r25, r10
 ab8:	99 7e       	andi	r25, 0xE9	; 233
 aba:	a9 2e       	mov	r10, r25
 abc:	09 c0       	rjmp	.+18     	; 0xad0 <__stack+0x271>
 abe:	a2 fe       	sbrs	r10, 2
 ac0:	06 c0       	rjmp	.+12     	; 0xace <__stack+0x26f>
 ac2:	b3 94       	inc	r11
 ac4:	b3 94       	inc	r11
 ac6:	04 c0       	rjmp	.+8      	; 0xad0 <__stack+0x271>
 ac8:	8a 2d       	mov	r24, r10
 aca:	86 78       	andi	r24, 0x86	; 134
 acc:	09 f0       	breq	.+2      	; 0xad0 <__stack+0x271>
 ace:	b3 94       	inc	r11
 ad0:	a3 fc       	sbrc	r10, 3
 ad2:	11 c0       	rjmp	.+34     	; 0xaf6 <__stack+0x297>
 ad4:	a0 fe       	sbrs	r10, 0
 ad6:	06 c0       	rjmp	.+12     	; 0xae4 <__stack+0x285>
 ad8:	b2 14       	cp	r11, r2
 ada:	88 f4       	brcc	.+34     	; 0xafe <__stack+0x29f>
 adc:	28 0c       	add	r2, r8
 ade:	92 2c       	mov	r9, r2
 ae0:	9b 18       	sub	r9, r11
 ae2:	0e c0       	rjmp	.+28     	; 0xb00 <__stack+0x2a1>
 ae4:	b2 14       	cp	r11, r2
 ae6:	60 f4       	brcc	.+24     	; 0xb00 <__stack+0x2a1>
 ae8:	b6 01       	movw	r22, r12
 aea:	80 e2       	ldi	r24, 0x20	; 32
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	0e 94 df 05 	call	0xbbe	; 0xbbe <fputc>
 af2:	b3 94       	inc	r11
 af4:	f7 cf       	rjmp	.-18     	; 0xae4 <__stack+0x285>
 af6:	b2 14       	cp	r11, r2
 af8:	18 f4       	brcc	.+6      	; 0xb00 <__stack+0x2a1>
 afa:	2b 18       	sub	r2, r11
 afc:	02 c0       	rjmp	.+4      	; 0xb02 <__stack+0x2a3>
 afe:	98 2c       	mov	r9, r8
 b00:	21 2c       	mov	r2, r1
 b02:	a4 fe       	sbrs	r10, 4
 b04:	10 c0       	rjmp	.+32     	; 0xb26 <__stack+0x2c7>
 b06:	b6 01       	movw	r22, r12
 b08:	80 e3       	ldi	r24, 0x30	; 48
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	0e 94 df 05 	call	0xbbe	; 0xbbe <fputc>
 b10:	a2 fe       	sbrs	r10, 2
 b12:	17 c0       	rjmp	.+46     	; 0xb42 <__stack+0x2e3>
 b14:	a1 fc       	sbrc	r10, 1
 b16:	03 c0       	rjmp	.+6      	; 0xb1e <__stack+0x2bf>
 b18:	88 e7       	ldi	r24, 0x78	; 120
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	02 c0       	rjmp	.+4      	; 0xb22 <__stack+0x2c3>
 b1e:	88 e5       	ldi	r24, 0x58	; 88
 b20:	90 e0       	ldi	r25, 0x00	; 0
 b22:	b6 01       	movw	r22, r12
 b24:	0c c0       	rjmp	.+24     	; 0xb3e <__stack+0x2df>
 b26:	8a 2d       	mov	r24, r10
 b28:	86 78       	andi	r24, 0x86	; 134
 b2a:	59 f0       	breq	.+22     	; 0xb42 <__stack+0x2e3>
 b2c:	a1 fe       	sbrs	r10, 1
 b2e:	02 c0       	rjmp	.+4      	; 0xb34 <__stack+0x2d5>
 b30:	8b e2       	ldi	r24, 0x2B	; 43
 b32:	01 c0       	rjmp	.+2      	; 0xb36 <__stack+0x2d7>
 b34:	80 e2       	ldi	r24, 0x20	; 32
 b36:	a7 fc       	sbrc	r10, 7
 b38:	8d e2       	ldi	r24, 0x2D	; 45
 b3a:	b6 01       	movw	r22, r12
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	0e 94 df 05 	call	0xbbe	; 0xbbe <fputc>
 b42:	89 14       	cp	r8, r9
 b44:	38 f4       	brcc	.+14     	; 0xb54 <__stack+0x2f5>
 b46:	b6 01       	movw	r22, r12
 b48:	80 e3       	ldi	r24, 0x30	; 48
 b4a:	90 e0       	ldi	r25, 0x00	; 0
 b4c:	0e 94 df 05 	call	0xbbe	; 0xbbe <fputc>
 b50:	9a 94       	dec	r9
 b52:	f7 cf       	rjmp	.-18     	; 0xb42 <__stack+0x2e3>
 b54:	8a 94       	dec	r8
 b56:	f3 01       	movw	r30, r6
 b58:	e8 0d       	add	r30, r8
 b5a:	f1 1d       	adc	r31, r1
 b5c:	80 81       	ld	r24, Z
 b5e:	b6 01       	movw	r22, r12
 b60:	90 e0       	ldi	r25, 0x00	; 0
 b62:	0e 94 df 05 	call	0xbbe	; 0xbbe <fputc>
 b66:	81 10       	cpse	r8, r1
 b68:	f5 cf       	rjmp	.-22     	; 0xb54 <__stack+0x2f5>
 b6a:	22 20       	and	r2, r2
 b6c:	09 f4       	brne	.+2      	; 0xb70 <__stack+0x311>
 b6e:	42 ce       	rjmp	.-892    	; 0x7f4 <vfprintf+0x24>
 b70:	b6 01       	movw	r22, r12
 b72:	80 e2       	ldi	r24, 0x20	; 32
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	0e 94 df 05 	call	0xbbe	; 0xbbe <fputc>
 b7a:	2a 94       	dec	r2
 b7c:	f6 cf       	rjmp	.-20     	; 0xb6a <__stack+0x30b>
 b7e:	f6 01       	movw	r30, r12
 b80:	86 81       	ldd	r24, Z+6	; 0x06
 b82:	97 81       	ldd	r25, Z+7	; 0x07
 b84:	02 c0       	rjmp	.+4      	; 0xb8a <__stack+0x32b>
 b86:	8f ef       	ldi	r24, 0xFF	; 255
 b88:	9f ef       	ldi	r25, 0xFF	; 255
 b8a:	2b 96       	adiw	r28, 0x0b	; 11
 b8c:	e2 e1       	ldi	r30, 0x12	; 18
 b8e:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__epilogue_restores__>

00000b92 <strnlen_P>:
 b92:	fc 01       	movw	r30, r24
 b94:	05 90       	lpm	r0, Z+
 b96:	61 50       	subi	r22, 0x01	; 1
 b98:	70 40       	sbci	r23, 0x00	; 0
 b9a:	01 10       	cpse	r0, r1
 b9c:	d8 f7       	brcc	.-10     	; 0xb94 <strnlen_P+0x2>
 b9e:	80 95       	com	r24
 ba0:	90 95       	com	r25
 ba2:	8e 0f       	add	r24, r30
 ba4:	9f 1f       	adc	r25, r31
 ba6:	08 95       	ret

00000ba8 <strnlen>:
 ba8:	fc 01       	movw	r30, r24
 baa:	61 50       	subi	r22, 0x01	; 1
 bac:	70 40       	sbci	r23, 0x00	; 0
 bae:	01 90       	ld	r0, Z+
 bb0:	01 10       	cpse	r0, r1
 bb2:	d8 f7       	brcc	.-10     	; 0xbaa <strnlen+0x2>
 bb4:	80 95       	com	r24
 bb6:	90 95       	com	r25
 bb8:	8e 0f       	add	r24, r30
 bba:	9f 1f       	adc	r25, r31
 bbc:	08 95       	ret

00000bbe <fputc>:
 bbe:	0f 93       	push	r16
 bc0:	1f 93       	push	r17
 bc2:	cf 93       	push	r28
 bc4:	df 93       	push	r29
 bc6:	fb 01       	movw	r30, r22
 bc8:	23 81       	ldd	r18, Z+3	; 0x03
 bca:	21 fd       	sbrc	r18, 1
 bcc:	03 c0       	rjmp	.+6      	; 0xbd4 <fputc+0x16>
 bce:	8f ef       	ldi	r24, 0xFF	; 255
 bd0:	9f ef       	ldi	r25, 0xFF	; 255
 bd2:	2c c0       	rjmp	.+88     	; 0xc2c <fputc+0x6e>
 bd4:	22 ff       	sbrs	r18, 2
 bd6:	16 c0       	rjmp	.+44     	; 0xc04 <fputc+0x46>
 bd8:	46 81       	ldd	r20, Z+6	; 0x06
 bda:	57 81       	ldd	r21, Z+7	; 0x07
 bdc:	24 81       	ldd	r18, Z+4	; 0x04
 bde:	35 81       	ldd	r19, Z+5	; 0x05
 be0:	42 17       	cp	r20, r18
 be2:	53 07       	cpc	r21, r19
 be4:	44 f4       	brge	.+16     	; 0xbf6 <fputc+0x38>
 be6:	a0 81       	ld	r26, Z
 be8:	b1 81       	ldd	r27, Z+1	; 0x01
 bea:	9d 01       	movw	r18, r26
 bec:	2f 5f       	subi	r18, 0xFF	; 255
 bee:	3f 4f       	sbci	r19, 0xFF	; 255
 bf0:	31 83       	std	Z+1, r19	; 0x01
 bf2:	20 83       	st	Z, r18
 bf4:	8c 93       	st	X, r24
 bf6:	26 81       	ldd	r18, Z+6	; 0x06
 bf8:	37 81       	ldd	r19, Z+7	; 0x07
 bfa:	2f 5f       	subi	r18, 0xFF	; 255
 bfc:	3f 4f       	sbci	r19, 0xFF	; 255
 bfe:	37 83       	std	Z+7, r19	; 0x07
 c00:	26 83       	std	Z+6, r18	; 0x06
 c02:	14 c0       	rjmp	.+40     	; 0xc2c <fputc+0x6e>
 c04:	8b 01       	movw	r16, r22
 c06:	ec 01       	movw	r28, r24
 c08:	fb 01       	movw	r30, r22
 c0a:	00 84       	ldd	r0, Z+8	; 0x08
 c0c:	f1 85       	ldd	r31, Z+9	; 0x09
 c0e:	e0 2d       	mov	r30, r0
 c10:	09 95       	icall
 c12:	89 2b       	or	r24, r25
 c14:	e1 f6       	brne	.-72     	; 0xbce <fputc+0x10>
 c16:	d8 01       	movw	r26, r16
 c18:	16 96       	adiw	r26, 0x06	; 6
 c1a:	8d 91       	ld	r24, X+
 c1c:	9c 91       	ld	r25, X
 c1e:	17 97       	sbiw	r26, 0x07	; 7
 c20:	01 96       	adiw	r24, 0x01	; 1
 c22:	17 96       	adiw	r26, 0x07	; 7
 c24:	9c 93       	st	X, r25
 c26:	8e 93       	st	-X, r24
 c28:	16 97       	sbiw	r26, 0x06	; 6
 c2a:	ce 01       	movw	r24, r28
 c2c:	df 91       	pop	r29
 c2e:	cf 91       	pop	r28
 c30:	1f 91       	pop	r17
 c32:	0f 91       	pop	r16
 c34:	08 95       	ret

00000c36 <__ultoa_invert>:
 c36:	fa 01       	movw	r30, r20
 c38:	aa 27       	eor	r26, r26
 c3a:	28 30       	cpi	r18, 0x08	; 8
 c3c:	51 f1       	breq	.+84     	; 0xc92 <__ultoa_invert+0x5c>
 c3e:	20 31       	cpi	r18, 0x10	; 16
 c40:	81 f1       	breq	.+96     	; 0xca2 <__ultoa_invert+0x6c>
 c42:	e8 94       	clt
 c44:	6f 93       	push	r22
 c46:	6e 7f       	andi	r22, 0xFE	; 254
 c48:	6e 5f       	subi	r22, 0xFE	; 254
 c4a:	7f 4f       	sbci	r23, 0xFF	; 255
 c4c:	8f 4f       	sbci	r24, 0xFF	; 255
 c4e:	9f 4f       	sbci	r25, 0xFF	; 255
 c50:	af 4f       	sbci	r26, 0xFF	; 255
 c52:	b1 e0       	ldi	r27, 0x01	; 1
 c54:	3e d0       	rcall	.+124    	; 0xcd2 <__ultoa_invert+0x9c>
 c56:	b4 e0       	ldi	r27, 0x04	; 4
 c58:	3c d0       	rcall	.+120    	; 0xcd2 <__ultoa_invert+0x9c>
 c5a:	67 0f       	add	r22, r23
 c5c:	78 1f       	adc	r23, r24
 c5e:	89 1f       	adc	r24, r25
 c60:	9a 1f       	adc	r25, r26
 c62:	a1 1d       	adc	r26, r1
 c64:	68 0f       	add	r22, r24
 c66:	79 1f       	adc	r23, r25
 c68:	8a 1f       	adc	r24, r26
 c6a:	91 1d       	adc	r25, r1
 c6c:	a1 1d       	adc	r26, r1
 c6e:	6a 0f       	add	r22, r26
 c70:	71 1d       	adc	r23, r1
 c72:	81 1d       	adc	r24, r1
 c74:	91 1d       	adc	r25, r1
 c76:	a1 1d       	adc	r26, r1
 c78:	20 d0       	rcall	.+64     	; 0xcba <__ultoa_invert+0x84>
 c7a:	09 f4       	brne	.+2      	; 0xc7e <__ultoa_invert+0x48>
 c7c:	68 94       	set
 c7e:	3f 91       	pop	r19
 c80:	2a e0       	ldi	r18, 0x0A	; 10
 c82:	26 9f       	mul	r18, r22
 c84:	11 24       	eor	r1, r1
 c86:	30 19       	sub	r19, r0
 c88:	30 5d       	subi	r19, 0xD0	; 208
 c8a:	31 93       	st	Z+, r19
 c8c:	de f6       	brtc	.-74     	; 0xc44 <__ultoa_invert+0xe>
 c8e:	cf 01       	movw	r24, r30
 c90:	08 95       	ret
 c92:	46 2f       	mov	r20, r22
 c94:	47 70       	andi	r20, 0x07	; 7
 c96:	40 5d       	subi	r20, 0xD0	; 208
 c98:	41 93       	st	Z+, r20
 c9a:	b3 e0       	ldi	r27, 0x03	; 3
 c9c:	0f d0       	rcall	.+30     	; 0xcbc <__ultoa_invert+0x86>
 c9e:	c9 f7       	brne	.-14     	; 0xc92 <__ultoa_invert+0x5c>
 ca0:	f6 cf       	rjmp	.-20     	; 0xc8e <__ultoa_invert+0x58>
 ca2:	46 2f       	mov	r20, r22
 ca4:	4f 70       	andi	r20, 0x0F	; 15
 ca6:	40 5d       	subi	r20, 0xD0	; 208
 ca8:	4a 33       	cpi	r20, 0x3A	; 58
 caa:	18 f0       	brcs	.+6      	; 0xcb2 <__ultoa_invert+0x7c>
 cac:	49 5d       	subi	r20, 0xD9	; 217
 cae:	31 fd       	sbrc	r19, 1
 cb0:	40 52       	subi	r20, 0x20	; 32
 cb2:	41 93       	st	Z+, r20
 cb4:	02 d0       	rcall	.+4      	; 0xcba <__ultoa_invert+0x84>
 cb6:	a9 f7       	brne	.-22     	; 0xca2 <__ultoa_invert+0x6c>
 cb8:	ea cf       	rjmp	.-44     	; 0xc8e <__ultoa_invert+0x58>
 cba:	b4 e0       	ldi	r27, 0x04	; 4
 cbc:	a6 95       	lsr	r26
 cbe:	97 95       	ror	r25
 cc0:	87 95       	ror	r24
 cc2:	77 95       	ror	r23
 cc4:	67 95       	ror	r22
 cc6:	ba 95       	dec	r27
 cc8:	c9 f7       	brne	.-14     	; 0xcbc <__ultoa_invert+0x86>
 cca:	00 97       	sbiw	r24, 0x00	; 0
 ccc:	61 05       	cpc	r22, r1
 cce:	71 05       	cpc	r23, r1
 cd0:	08 95       	ret
 cd2:	9b 01       	movw	r18, r22
 cd4:	ac 01       	movw	r20, r24
 cd6:	0a 2e       	mov	r0, r26
 cd8:	06 94       	lsr	r0
 cda:	57 95       	ror	r21
 cdc:	47 95       	ror	r20
 cde:	37 95       	ror	r19
 ce0:	27 95       	ror	r18
 ce2:	ba 95       	dec	r27
 ce4:	c9 f7       	brne	.-14     	; 0xcd8 <__ultoa_invert+0xa2>
 ce6:	62 0f       	add	r22, r18
 ce8:	73 1f       	adc	r23, r19
 cea:	84 1f       	adc	r24, r20
 cec:	95 1f       	adc	r25, r21
 cee:	a0 1d       	adc	r26, r0
 cf0:	08 95       	ret

00000cf2 <__prologue_saves__>:
 cf2:	2f 92       	push	r2
 cf4:	3f 92       	push	r3
 cf6:	4f 92       	push	r4
 cf8:	5f 92       	push	r5
 cfa:	6f 92       	push	r6
 cfc:	7f 92       	push	r7
 cfe:	8f 92       	push	r8
 d00:	9f 92       	push	r9
 d02:	af 92       	push	r10
 d04:	bf 92       	push	r11
 d06:	cf 92       	push	r12
 d08:	df 92       	push	r13
 d0a:	ef 92       	push	r14
 d0c:	ff 92       	push	r15
 d0e:	0f 93       	push	r16
 d10:	1f 93       	push	r17
 d12:	cf 93       	push	r28
 d14:	df 93       	push	r29
 d16:	cd b7       	in	r28, 0x3d	; 61
 d18:	de b7       	in	r29, 0x3e	; 62
 d1a:	ca 1b       	sub	r28, r26
 d1c:	db 0b       	sbc	r29, r27
 d1e:	0f b6       	in	r0, 0x3f	; 63
 d20:	f8 94       	cli
 d22:	de bf       	out	0x3e, r29	; 62
 d24:	0f be       	out	0x3f, r0	; 63
 d26:	cd bf       	out	0x3d, r28	; 61
 d28:	09 94       	ijmp

00000d2a <__epilogue_restores__>:
 d2a:	2a 88       	ldd	r2, Y+18	; 0x12
 d2c:	39 88       	ldd	r3, Y+17	; 0x11
 d2e:	48 88       	ldd	r4, Y+16	; 0x10
 d30:	5f 84       	ldd	r5, Y+15	; 0x0f
 d32:	6e 84       	ldd	r6, Y+14	; 0x0e
 d34:	7d 84       	ldd	r7, Y+13	; 0x0d
 d36:	8c 84       	ldd	r8, Y+12	; 0x0c
 d38:	9b 84       	ldd	r9, Y+11	; 0x0b
 d3a:	aa 84       	ldd	r10, Y+10	; 0x0a
 d3c:	b9 84       	ldd	r11, Y+9	; 0x09
 d3e:	c8 84       	ldd	r12, Y+8	; 0x08
 d40:	df 80       	ldd	r13, Y+7	; 0x07
 d42:	ee 80       	ldd	r14, Y+6	; 0x06
 d44:	fd 80       	ldd	r15, Y+5	; 0x05
 d46:	0c 81       	ldd	r16, Y+4	; 0x04
 d48:	1b 81       	ldd	r17, Y+3	; 0x03
 d4a:	aa 81       	ldd	r26, Y+2	; 0x02
 d4c:	b9 81       	ldd	r27, Y+1	; 0x01
 d4e:	ce 0f       	add	r28, r30
 d50:	d1 1d       	adc	r29, r1
 d52:	0f b6       	in	r0, 0x3f	; 63
 d54:	f8 94       	cli
 d56:	de bf       	out	0x3e, r29	; 62
 d58:	0f be       	out	0x3f, r0	; 63
 d5a:	cd bf       	out	0x3d, r28	; 61
 d5c:	ed 01       	movw	r28, r26
 d5e:	08 95       	ret

00000d60 <_exit>:
 d60:	f8 94       	cli

00000d62 <__stop_program>:
 d62:	ff cf       	rjmp	.-2      	; 0xd62 <__stop_program>
